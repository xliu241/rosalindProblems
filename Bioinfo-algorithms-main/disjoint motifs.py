superstr = 'ATATACCCATCACCGTGTCATCAAGCCTAATAGATAATGTGAAGAACGATTACTGACTCCTGTATTGAACTAGCCATTTAGCAGTGTTGAACTAGTGCGAATAGTATCCTTCTATGCAACGAGTAGGATGTCGCCCCGTAACTTTGCCGGTTGGTGTGAGGCGTTTTAATCGGAAGACTTCGACGGTTGTGAATTCCTAGACTTAGAGTCGTCTTCGGATGCGATGGAAGGGTTTATATCTCTGCGCGCGTTGGGGACACCTACGCCTAACAACTGGCTGGAAACTACTAGTTTCGCCCTCATTTAATCTCACTTTTATTCCTACAAATTCTACTGCAGAGGTGTAGTTGACCCGTATTCTGGTGATCATCTCTAGAGGCTCACTACGTGACTTTAGTCGGGCGAATAATTGATGTTGTTACCTACGTACCGACTGTAATTCGGTGGCTACAATTCCATGTTGAAATCTTGCGCTAAGATCTGCTCAAGGCCTTCCCATGCGCTGGGAAGACCAGACATCTGAACCGGTCCTTTTTCCATATACTTATGTGTAACTAGTGGTCGCCGGGGATGTTCCGACCGAGCGGAGCACCTTGCAATATGGAACCTGATTAGCTCCAGATATATTAGGCGTAGTAGGTCAACAATCCGTCTAGACAATATCAATACACGAAGTGGGAGGACAGATGGTATGCCACGTTTCCGATGTCATGCACGTAGCTTTTTCGATCGCGGGCAGCATTCAAGGAGTCAAGATCATGACGGGCTAGGGCAGAACACTCTATTCCAAATGACGGTCTATCGGCCGTGGTATACACTAGATAGCGCAACTCGAGAGACTCCGTGTGAGCCTTCTAGGTGTGTATTGGGTAACAGTGGCCGTATCGTTTTTTGTAGATCCCTTCCACCCTGTACACCTGGACATCCGTGTTGGGGTTTCGTCGCTTGTCACGTAGTCTGTCAAATATCTACTTTAAGTGTAGAGAGCCAAACTAGATTAACGCACCCGTAACTATGCGGCGAGCCCCAAACGTGTCATATACCAGCGAAGAACGCTAGCCACGGCTGATGCCGCAAAAGCACCCTGTGAGGACGATGGGCGCGACGCACTGTCAGAAAGATGCTGATAGACACATAACTGGTCGTACCACGACCGTTGTGGGGCCCATCGGCTAGCGAGGATTACCATTACTTGAACAGTTAGGACCTTCTGTACTGGAGAAACGCGCGGTTCATCAGGCGTGATGTCGGAATGGGGAAGCGTTAGTCTTTCGTTGTGGCAACGAATCCTTGATAGGAATGATGCTATGATAAAACAATGGTCAGCCCGGCCGCTTCTACGTCTGTATCTAGTTTTCTTATGTTGTGTTAATTAGAGCGGGCCCCCCTCCAACGTGCACTTTAAACTTGAAAGCTAGCGCCTCCACCCTCGGTTTAACGTACGCGAACGCTCCTTGACCCCTGTCTGAGGCGTGAACTATATTGACGGTTCTAAACGTCAGAAACATCACAAACTCCTAGACACTGTGGGTTGCTAACGTTAATAACTATAATCTACTCACTCTCCGTTTAATTCACAGGCTCGTTATAATGCGTAAGGGCTTTCCTGGACCCCGCGTGAACCAATGTCGAGCGATCTTTTACTCCGGCGGACTAGGACCACAAAATGAATCTGACGGTTCTTGCGCGCAGACAGATTTGCCGTGACCCTTTCGTCGATATACCTAACTGCGACCTTTAGCACCTGACTCCGCACGATTCGGTACCGTCCTTTGGGTCTAGCTCGAGTACTATTCCGCACGGCAGCGTGCACCCCACGAACCGGCGCAAAAGGCCCATCAATCGGACGCGCGTTGTAATGTTGAGGGTTAGCTGGTAGTAGTATTACCGTATTGAAGGGGAAGTCTTATTTTGACGGACTAGTGTTAAGCAGTTAGTTGCAATACGGAAAGGCCAGAGCCACTCGCCTAGCCTCGTAAAATACTGACAGCACCCGTATATGGCTAACCACTCGACTAAGGGTTAGAACAAATTACCGGCGTTTGCCTCTGGGTTCCAAGGATCTAGGGTGGAACCTGATATAACTACTAGTTAGTTGGTAATTCATCCAAAGTTCACCGGTGACTGAGTTGAGGAGCACCGCTGTAGCGCTGACACAATCCATCAGGTCCTTATAAAACGAGTGCGGCGTGGGAAAGGTTGCCAGCTGCCGTGTCCTCTAAATCAATGTGATGCCCCAAGGCAACCAGCTACTCAACTCACGGCAAGGCAGGGGAGACTCCTGTATGCACGTTGTTTGAGGGTGTCTAGGATTCAGACTCATCCGTTTCGTATTGGAGCGTCCGAAATGGTACCCTTTGGGTGCTCATCCGACTGAAGGGCGTGGCACATTTCAGTCCCGGACTCCTGTACGTGTCAGTTGTGAGGTAATCCGGACAAGTATTTTGCGAGCCCATAAACAAAAATATGGCTTCCTCCCTCAACGCGTTAAGAAAGTCGTAGAGTCCGCTTCTCCGTATATCTATTTGTCACCACCGCGCATCGTTAGCATGAGGTACTGGCCCAAAAGGAAGACGACAAAAGGTGTTCGAGGAAGGAGGAAATCTCATGGTCCCAGCTGTGACGATTCAAAAGCAGACCTTCTTCCAAGCTAGCATACAACGTAATGAATCGTTGAAACATGGCATCCAGTATAGATCTCACTAACCGACGTTCCTGAGCATACCATGTCTGTTCCATGTCATGGCAAATTACACAATCCGTGCTCATCTTTAGACTAGCCGAACATTTGGGGTGGTCTGTTCACCGTTATGCACAGTATTTGTTATAATTATTAGGGGGGGAATGTCCTGGTCAGCCGCCGTTGATGGCACTTGCATGTTTAGGCATAGATCTTCTAGTCAGTCGAGGTGTCCGTGAGGACAAACAGTCCTCTTTCTCGAAGGGGCGCGCTCAGGTATCGAGGCGCGGCGTATATGCCCATTGATTAGGATGTGTTAGGTTGATATTACTGGTATTAGGACAGACACCGCCGTTTGCAAAGGTCAATAAGGCAGTTACGCATCTTTTCCCCCATTTCCGACATTCGTGCAGGGAGACATCTACTGGTCGAATACCCCTCGCGTGTTGTATCTAAACTTATCATCGTATAATGCCAGGGAATGGACTTCATTTATTGTGATTGATACGCACCGCTGCACGCAAGGGCAACCCTCCTGGCGCACCAAGAACTAGAAAGTGTCAGCGTGCTTTGAAAGCGCCAAATTAAAGTTTCATCAAGAATCTGCATCGGTTCAATATCATCGCCAGGGGACCCTATTGTCGTGCACCTAATACCCGCCTAGGATTCTAAGAAATATAGGTGGTACGCCGGTAAATCTCATCTACGTAACAGTCTTTAGAGTCAACACGTGGCGGGATCGGGGCCTCATTTGCGACCTACCGTGAAGACGAGAATTATCATCTGACAGTCAGTGCGGCTTAGGCGGATGGAGTTGCCTGCCCCCTGTCGCTCATGGACGTCGTAAAATATCTCGTCTTGCTATCATAGCGTGTTTCAAAGTCTTACTCGTCCTCACGGCATAAATCCGACGCTTGTCTATAAGGAGCTCGGAGCAGCGCGAATGATGTAGAAGGTCCGTAGGTGTATTTAGTGGCGAAGTTTTTGCTATATGTCACAAATGAGAACTTCCGCTCCAAGGAAAACTGGTGCGTTGTCATATATATGTGGTAGTAAGACAGCTACTGCATACATCTACGACCGCGACGAGTGTGCGCCTAAGTCCCAGTGCCTCAAATGTATTCATGTTGAAAGAGTAGATTATTCCTTTGTGTAGTTTCACTACAATCCAGGAGTTAAGCATAAGTTCATCCTATCAGCATCTTTCGGACGACTAGAGCGTATCGGTAACACGCGGTCGAGAGATTTCTGGGCAGCTGTGGTGCTAGCGTGTGCACGTCGACGGCCAGCAAGAGCGGTCCAGCCTTATCCCGTTAGGAGTCGTACGCAGGGTCACGTCTTGCCTTATGGTTTTGGAACCCCCCGACAATGGGTATGCAGGAGGACTGGGAATGAATTGAAGCCGAGTTTCGCTGACGTCCCAGGGGCTTAAGGCCGTCGCGGTCAAACATGGTACCTACGACAATATTTTCTCGTTAGTCGTACCCTGCAGGATCAAGGGAATAACGAAGCCGGTGTATCTTTTTATAAGTTGGTAGGCTGGCCTTAGACAGACCTGGTCCTGGCTTTAAGATGGACAGGTGGGATGAATCTGGCTCACCGGGACATCACCGCTCTAGGGGAACCAAATCGCTAGTTTTATGTCTACGCAGCCGGCTTTTACGAAGGGTCCAGTACTAGTCGATTGTCAGGGGTACGATGCAGCAGATTATTGGGATTCCCAAATATTCTAGCGACCGTATCAGTACTGGCAATCCCTTGATGATCGTGGGCAAAATTCGGCTTGCGTTGTGCAAGATCAACGCGCAAGACATATCGCCGAGCAGACCAGGTAATTGCCGGTCTCCCTTAATAATGAATTGCACCTTCGAGAACTACGGGGGGGAGGTTCCTGCCATAAAAAGTACGTCTCGTACACTACGACTCATGCTACTCTATCTCAAGATTGTACAGGCGCACTACTAAGTTCGATGCGGTAAAATTACCTTCTACCTGGAGGTACGGGCTTCTGCAAAAGTAACCGAGAGGCCTTGTTCGAGACGTAAGTCTGCGGAGTCCGGACGAAGACGGGAATTGACGGTATGTCGTACAAGCTAGTTCCTCCCTGATTCGTTCAGAGGGTCTCAGTACATTGGACGTATTTAGTTGGAGCACGCTGGGATCCAGGTGCGTGACGATTAAGGAGCTAGGCGTGCTCATATCTCAAATCTAGTGGGTGTTGTCCCATAAATAATACACTCTGTACGGTAAGGCAACCCTGATTTCCCGTACGGGAAACGATCACCGGCACACTCTCCGAAATTAGACACCGCGCTTACATTTCGGCTGTTTCGAAGAGTCACGGGAGGATGATTAAACGTGGCCTAGAATAACTGTTCCATGGCAATCCGATATACGACCGCCACACCAGGTATTGAAACGAGGTACTCCAGCTTTTTAGGCGCATATCAAAGTACGTTTTCCCGCATCACAGAAATGCGGAGGCTAGTCATCCTTCCTGATCGATTGCTGTGGAGACGTTTCTTCGCCTAAAAATAGTCTACCCCTACATGGCTAGTGGGAGCCTTCGGAATATCAGATCAGGCCTGGTTGTATTGTCGCGCTTGCCTGAAATCACTTTGCTACCAACCCCATTCCGGAGATCTTAGATGCGATCGCTCCGGTCCTCGCCGATTTTTGCCTCGCGGGAATATCAAGGTGTAGGCTCCGATCCTGAGTCTCGAAGACTAACCTTCCCGTTTATGAATCCTCGACGTCACCACCGTTAGTTATGTAAAGCCGAAATTTAATTTTTAAGTCCTACGCCTCCATAGCGAGGTGGGGTGATGCTCTCATGCTCGACATGAGCCCGGGCACGCAACCCCATTCGACCTTTCAGTGGGATGGCGCGGCGATGGTTGTACCCTGGTTTCTAAGGGCTCCCTCTATGGGCATACAGGCAGCGGGCCGCTTAGTCGCCGCTTACTTTTCACGTGATCCTGTACTCGCAGCATTAGCGGAGTCCGATCCGGGAATCCTGAGCCATAACCGCAAGTAATAATAAAAATATTGCGCCTAGCGTCGCGTCCTCCACCCTGAAAATGAGTCGGAAGTAAATCCTCCGATGATATGGATAACACGATTCTAACTTCCATGGTGCTTTGCCAATTTCCATTCCTGTTGCTAGGGTCGCAGCCGGGTACACGTGTATTCTACTGCACGTGGGCCGCAGTTTTTATATATGCCCCCACCGCGGACATCTACTGGTTGCGCGCCGGGTTTTTCGATTATTACCGTTAGTTCCAAAGCAAATAACTAACCTTCTGTCCGTCGGTGTGGGATGACGTATATATTTAAAAAAAACTACAAGCGGTAGAGGGGTCCAATTGTCCCGGGTTTATCAACTCTTCGGAGGAAGCTCGCAATTAATTGAAACGAAGCAAGAGGGTTCGGTACTGCTAACTTGGTGCGTTGGGTCGTCATCCTATGCATAAGACTACGGGCCCTTGCTATTATCGGGCAGCCAAATGGACTCGCAAGTGGAAGGCTATTGCTTCATACAAGCAGTGCAGTAACTCCGAGAGTCGTCTAGCTTCTTGTGTCGTCGACGGGCTGGGCTCCTGGCCTCAATTTCCTTCTCTCTCAAGATTGCCACGCTGAAGGGTATACGGCAGCAGGAGGCAAGCTAGGTTCTGTGCCCTTTTCTATAGTGTTGCATTGAGGCTAAACAAGCGGCGTGGATTGTTGCCTTGTACACCACTATTCCTTATTGCTTACCATTGACGATGCACCGTATTTATGAACCGTTATTGAGTACCTATGGATACTCAGCACCACTGGGAAGGGGCTTTGGTTGCCCAAAGATCGGGTGTAATGTCGAGCGCCGGTTCCTCACTGGCAGGACTAATACTGTATACGAAAACGCAAAAGCACACGATTTTGAGTGAGCGCCAGCTATGTCGGGGTAAAGGTCAGGTGTCAACTGCACCTAACTGACCGGACCGGTACAGGCCGGGCGGTCCGGTTATATGCAGGGCCTCGGTAGAAACACATCCACGTAGGGCAAATTCCTCGAAAATCGAAGTTAAGTATATGATAATTTCCGCTAGTCGTAGTGCTGGGGCGGGGGCCGAGCGCGCTTAGGTGTACTTTGCCCCATCCCCAAGAGCCTGCGGGGTTGTGGAGAATAGTTTGGATTAGCCTCCAAACCTATTTGACAGATTGGACGAGACCTGAGATCGATCTCTTTGTGCACCTCCCAAGCATTCACAGATCAATCTCTTTGCAGTACACTCCTTTTATGGTACCATTCGGATCTGAAGGCAGTCTTACATACCCTCGCGCTAACCTAAATTAAAGACTACGCGCGATTAAGGGTCTATAGCAATGAAAACATGCGAAAAAAGTGCCGCAACAGTGAACTGGTCTCAGAATTCGTGGTTTAGGGGTCATGGTGTGTGTACATTTGCACACCCAGATTCGTAACGGTTACGTATAACAAAATCGTTGCCGTTACACCTCAACACTTAAAAACTTAATTTGCTGGGGTGTCGGGAGTCAACGTTCGGATTGGCAACAATTGTTGTCAGAGGCATCGATCCCGCACCGAATTCCAATCCGAGCGATCACCGAAGTTACGCACATTGGGTAGATGATGAACGGAAAGGCCATGGCATCAAAGAATATCTGACTTGTTGGGTGTTGGACTTTCCGCTTGCCGTTACAATGTGAGGTCGGGGGTCATCACTTGCCATGAAATGAGACGTTCCCTAGCAGTGCTCGACTGGAGCCTGCCAACCTTTTTAATCCGAAGACAGTTCTCTGGCTGCTCGAGCAAACGGAAGCGAGTCGCGATGGGGAGCGGTGGATTTCGCGGGTTCTCCTAAATTCGGCGGTAAGGAAATACATCTGCGCCACTACCGATTTGAAGAGTAAAAATAGCATTGGCCGAGCGTCAGACGGTTTTGAGGGGAAACTATCACGCGGGACTCTGCTCAGTTGTGCGCATGTCGTAACATCGCAACAAATAACCGCACCGTAAATCATCCATTATTGAGATAGATGTACGTACACACTAAGCGCCTAAGCCCGAGCGGATAACTAGGCGAGCCGAACGTGTGGCCCACCATTCTGCAGCTCTATTGCGCTGGTGGCAGGAAAGTTCGGCCCCGATACGGGCCTCCCTGCCCGTTACAGGCTAGCGGGGGATCGTACTACAGTGCATGCCGGCTGCCCGGCTCTTGATTCTACCTTCGTAAGGCCAACATGCAGAAAAATTAAGTATCGAGTCATTGCGCTTCCCCATAAGATAGGTACATAGTACATAACAAACCCAATCGGTCGACGAGACGGCCCCTGGAAGCTATAACACTATGCTACGCGGATGATCCAGTTTATACTGATGCCCCATAGTCAACACGCCTGCATTACTTGCGAAGCAGATCTCGACAAACGGACGATCCTTTACACCCTATAATCAATGGAACCCGATTTCATCTTTTGCTTACGTCTTCGTATGCCAGCAGTATAGTACTGACCTTTCTATGATATCTTCGGGCGACGTAGTACGATTTTTTCACGAGGTGGCGCTGGGAGTGCTAAGAGGTACTGCCTTCATCACGAAACAGCATAAAGAGCCCCTGTGGTGATGTACTCTTTGTAATCAGGCACGTGGTTTCGAGACGCGCGAAGTTTGATACTCAGACAAATATGAGAGGAGTCATTACCGCTTAGGTGCTCTGTTCGAAGGCAGAGCTCATTCCCGCTACCAACCGGACGTTATTTGCGTGGTGCGCAATAGTGGTTGAGTATAAGGGATGTACTGTGTAGGGTACCTCGAGCGGTCTGCGTCCACTCACCAATAGAACAAGGCGCTCCTCAATGTCCATCTAGCAGCAGCTGTGGGTTAACAGGCGTATGGCATGAGGGGTTGCACTATCTACTTACCATGGTATCTGTCAGGCACTCGCCAGCAAGATGGCTAGTGTCGCCGACACTGGTATGTCTCCTACACGAACGAGTTGACGAACCAGCATCGCACGCTCACTGATGTATCACCAACTGGTACTATCGGGCAAGCCCTAGTTCACGCCGAGCACTCATCGCCAATGTACGCCATAAATTAGCCAAGAAGACCCAGCTATTGATGAGTCCAATACTGTGAGTTAGCGCTGCTGTACCCCTGCCGCCCATGATAGGTGAAGTCGACCGATCGCGGAACACAATAATATTCTGTTTGAATCGATGTATAGAGTTTATATATGTATAGTGTACCTGCACACTTTTTCATCAGACAGAGTAATGTGATGGATGCCAGATCCTATTGGATTTGCTAAAGGTCAACCAATGCGCTGCGATGTGGGCTATAACAGCTGCCTGCGAGCTCCGGTTGCCAGCCACAGAAGGGTTGTGTGAACTGATCTAACCTCCTAATTCTTACATCGTCTGTATACTGCTCAACACTATAATCTTAATATTTGCATACTATACAGTCGAGGCATCTTGCAGGTTCAAGCCCTGGCTGTTGCCAGCTTGTCATGCTGCTAATCTCCGTCGGCGAGAGCATCCTTGAGTTTTGTACGTGATAGTAGGGAATAACCCGGAGCCATACCGCCCATTCTTAAACTAGTGTTAACGTCGGCTTCATGAACGAGCCGCTGAAGATGAGGTATTCGACGTTACCTTT'
dna = '''TGAT
TGC
TTG
TCAG
ACAAAGAT
GTTTCATA
CTTGTC
TGCCCCTGA
AGCTT
TTATCG
'''.split()

# ~ for p1 in patterns[2:]:
    # ~ m = ['0']*len(patterns)
    # ~ for p2 in patterns[:1]:
        # ~ i=0
        # ~ j=0
        # ~ for n in range(len(dna)):
            # ~ if dna[n] == p1[i]:
                # ~ i+=1
            # ~ elif dna[n] == p2[j]:
                # ~ j+=1
            # ~ else:
                # ~ i=0
                # ~ j=0
            # ~ print(i, j)
            # ~ if i == len(p1)-1 and j == len(p2)-1:
                # ~ m[patterns.index(p2)] = '1'
                # ~ break
    # ~ print(' '.join(m))

def check_interweave(dna1, dna2, superstr):
    '''Checks if two dna stands can be interwoven into a superstring.'''
    if len(superstr) == 0:
        return True
    elif dna1[0] == dna2[0] == superstr[0]:
        return check_interweave(dna1[1:], dna2, superstr[1:]) or check_interweave(dna1, dna2[1:], superstr[1:])
    elif dna1[0] == superstr[0]:
        return check_interweave(dna1[1:], dna2, superstr[1:])
    elif dna2[0] == superstr[0]:
        return check_interweave(dna1, dna2[1:], superstr[1:])
    else:
        return False

M = []
for i in range(len(dna)):
    M.append(['0']*len(dna))
    for j in range(len(dna)):
        if i <= j:
            # Count the combined number of each type of nucleotide in given dna strands.
            current_profile = [(dna[i] + dna[j]).count(nucleotide) for nucleotide in 'ACGT']
            # Compare the current profile to each substring of the same length in the superstring.
            for index in range(len(superstr)-len(dna[i])-len(dna[j])+1):
                # Having an identical profile is a necessary condition in order to be interweavable, but less computationally intensive.
                if current_profile == [superstr[index:index+len(dna[i])+len(dna[j])].count(nucleotide) for nucleotide in 'ACGT']:
                    # Check interweavability if the profiles match, add an extra character outside the alphabet to avoid index out of range errors.
                    if check_interweave(dna[i]+'$', dna[j]+'$', superstr[index:index+len(dna[i])+len(dna[j])]):
                        M[i][j] = '1'
                        break
        # The comparison are symmetric, so we've already done these computations.
        else:
            M[i][j] = M[j][i]
            
for n in M:
    print(' '.join(n))
